package com.streamapi;

import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

public class TestStream01 {

	public static void main(String[] args) {
		
		
		//anonymoys class
		//constructor defines a new class, without a name and creates object of that class
		TestStream01 ts = new TestStream01 () {
			
			
		};
		
		

		List<Integer> values = Arrays.asList(1,2,3,4,5,6);
		
		//Internal Iterations
		
		//functional interface -> SAM Interfaces(Single Abstract Method Interface)
		
		//values.forEach(i -> System.out.println(i));
		
		//---------------------------------------------------------
		
		//Consumer interface
		
//		Consumer<Integer> c = new Consumer<Integer>() {
//			
//			public void accept(Integer i) {
//				System.out.println(i);
//			}
//		};
		
//		Consumer<Integer> c = new Consumer<Integer>() {
//			
//			@Override
//			public void accept(Integer i) {
//				System.out.println(i);
//			}
//		};
		
		//Consumer<Integer> c = (Integer i) -> System.out.println(i);
		//Consumer<Integer> c = i -> System.out.println(i);
		
		//values.forEach(c);

		//values.forEach(i -> System.out.println(i));					//->							
		
		
		//Consumer<Integer> c = i -> System.out.println(i);
		
		//values.forEach(i -> System.out.println(i));
		
		//method reference
		//values.forEach(System.out::println);
		
		
//		values.forEach(
//			
//			new Consumer(Integer i) {
//				
//				System.out.println(i)							//->
//			}
//		);
		
		
		//values.forEach(i->doubleit(i));
		//values.forEach(TestStream01::doubleit);
		
		
		
		
		//values.forEach(c);
		
		
	}
	
	
	public static void doubleit(int i) {
		
		System.out.println(i*2);
	}

}













 
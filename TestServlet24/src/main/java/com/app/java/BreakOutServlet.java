package com.app.java;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 * Servlet implementation class BreakOutServlet
 */
public class BreakOutServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public BreakOutServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		HttpSession session = request.getSession(false);
		PrintWriter pw = response.getWriter();
		
		if(session == null) {
			pw.write("<html></body>Kindly Login To play</html></body>");
		}
		else {
		//PrintWriter pw = response.getWriter();
		pw.write("<html>\r\n"
				+ "<head>\r\n"
				+ "    <meta charset=\"utf-8\" />\r\n"
				+ "    <title>Gamedev Canvas Workshop</title>\r\n"
				+ "    <style>\r\n"
				+ "    	* { padding: 0; margin: 0; }\r\n"
				+ "    	canvas { background: #eee; display: block; margin: 0 auto; }\r\n"
				+ "    </style>\r\n"
				+ "</head>\r\n"
				+ "<body>\r\n"
				+ "\r\n"
				+ "<canvas id=\"myCanvas\" width=\"800\" height=\"600\"></canvas>\r\n"
				+ "\r\n"
				+ "<h3><a href='login'>Exit</a></h3>\r\n"
				+ "\r\n"
				+ "<script>\r\n"
				+ "  var canvas = document.getElementById(\"myCanvas\");\r\n"
				+ "  var ctx = canvas.getContext(\"2d\");\r\n"
				+ "\r\n"
				+ "  var x = canvas.width/2;\r\n"
				+ "  var y = canvas.height-30;\r\n"
				+ "  var dx = 2;\r\n"
				+ "  var dy = -2;\r\n"
				+ "  \r\n"
				+ "  var ballRadius = 10;\r\n"
				+ "\r\n"
				+ "  var paddleHeight = 10;\r\n"
				+ "  var paddleWidth = 100;\r\n"
				+ "  var paddleX = (canvas.width-paddleWidth) / 2;\r\n"
				+ "\r\n"
				+ "  var rightPressed = false;\r\n"
				+ "  var leftPressed = false;\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "var brickRowCount = 10;\r\n"
				+ "var brickColumnCount = 7;\r\n"
				+ "var brickWidth = 100;\r\n"
				+ "var brickHeight = 20;\r\n"
				+ "var brickPadding = 10;\r\n"
				+ "var brickOffsetTop = 50;\r\n"
				+ "var brickOffsetLeft = 30;\r\n"
				+ "\r\n"
				+ "var score = 0;\r\n"
				+ "\r\n"
				+ "var lives = 3;\r\n"
				+ "\r\n"
				+ "var bricks = [];\r\n"
				+ "for(var c=0; c<brickColumnCount; c++) {\r\n"
				+ "  bricks[c] = [];\r\n"
				+ "  for(var r=0; r<brickRowCount; r++){\r\n"
				+ "    bricks[c][r] = {x: 0, y: 0, status:1};\r\n"
				+ "  }\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "  // function draw() {\r\n"
				+ "  //   ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n"
				+ "  //   ctx.beginPath();\r\n"
				+ "  //   ctx.arc(x, y, 10, 0, Math.PI*2);\r\n"
				+ "  //   ctx.fillStyle = \"#0095DD\";\r\n"
				+ "  //   ctx.fill();\r\n"
				+ "  //   ctx.closePath();\r\n"
				+ "  //   x += dx;\r\n"
				+ "  //   y += dy;\r\n"
				+ "  // }\r\n"
				+ "\r\n"
				+ "  //replace draw() function with the \r\n"
				+ "  //following two functions\r\n"
				+ "   \r\n"
				+ "  function drawBall() {\r\n"
				+ "    ctx.beginPath();\r\n"
				+ "    ctx.arc(x, y, ballRadius, 0, Math.PI*2);\r\n"
				+ "    ctx.fillStyle = \"#ff2e4d\";\r\n"
				+ "    ctx.fill();\r\n"
				+ "    ctx.closePath();\r\n"
				+ "\r\n"
				+ "    if(rightPressed){\r\n"
				+ "      paddleX += 7;\r\n"
				+ "      if(paddleX + paddleWidth > canvas.width){\r\n"
				+ "        paddleX = canvas.width - paddleWidth;\r\n"
				+ "      }\r\n"
				+ "    }\r\n"
				+ "    else if(leftPressed) {\r\n"
				+ "      paddleX -= 7;\r\n"
				+ "      if(paddleX < 0){\r\n"
				+ "        paddleX = 0;\r\n"
				+ "      }\r\n"
				+ "    }\r\n"
				+ "  }\r\n"
				+ "\r\n"
				+ "  function drawPaddle() {\r\n"
				+ "    ctx.beginPath();\r\n"
				+ "    ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);\r\n"
				+ "    ctx.fillStyle = \"#0095DD\";\r\n"
				+ "    ctx.fill();\r\n"
				+ "    ctx.closePath();\r\n"
				+ "  }\r\n"
				+ "\r\n"
				+ "  function drawBricks(){\r\n"
				+ "    for(var c=0; c<brickColumnCount; c++){\r\n"
				+ "      for(var r=0; r<brickRowCount; r++){\r\n"
				+ "        if(bricks[c][r].status == 1){\r\n"
				+ "          var brickX = (c*(brickWidth+brickPadding))+brickOffsetLeft;\r\n"
				+ "        var brickY = (r*(brickHeight+brickPadding))+brickOffsetTop;\r\n"
				+ "        bricks[c][r].x = brickX;\r\n"
				+ "        bricks[c][r].y = brickY;\r\n"
				+ "        ctx.beginPath();\r\n"
				+ "        ctx.rect(brickX, brickY, brickWidth, brickHeight);\r\n"
				+ "        ctx.fillStyle = \"#10c29b\";\r\n"
				+ "        ctx.fill();\r\n"
				+ "        ctx.closePath();\r\n"
				+ "        }\r\n"
				+ "\r\n"
				+ "      }\r\n"
				+ "    }\r\n"
				+ "  }\r\n"
				+ "\r\n"
				+ "  function draw(){\r\n"
				+ "    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n"
				+ "    drawBricks();\r\n"
				+ "    drawBall();\r\n"
				+ "    drawPaddle();\r\n"
				+ "    drawScore();\r\n"
				+ "    drawLives();\r\n"
				+ "    collisionDetection();\r\n"
				+ "    x += dx;\r\n"
				+ "    y += dy;\r\n"
				+ "    if(y + dy < ballRadius){\r\n"
				+ "      dy = -dy;\r\n"
				+ "    } else if(y + dy > canvas.height-ballRadius) {\r\n"
				+ "      if(x > paddleX && x < paddleX + paddleWidth){\r\n"
				+ "        dy = -dy\r\n"
				+ "      } else {\r\n"
				+ "        lives--;\r\n"
				+ "if(!lives) {\r\n"
				+ "    alert(\"GAME OVER\");\r\n"
				+ "    document.location.reload();\r\n"
				+ "    clearInterval(interval); // Needed for Chrome to end game\r\n"
				+ "}\r\n"
				+ "else {\r\n"
				+ "    x = canvas.width/2;\r\n"
				+ "    y = canvas.height-30;\r\n"
				+ "    dx = 2;\r\n"
				+ "    dy = -2;\r\n"
				+ "    paddleX = (canvas.width-paddleWidth)/2;\r\n"
				+ "}\r\n"
				+ "      }\r\n"
				+ "    }\r\n"
				+ "    if (x + dx > canvas.width-ballRadius || x + dx < ballRadius) {\r\n"
				+ "      dx = -dx\r\n"
				+ "    }\r\n"
				+ "    requestAnimationFrame(draw);\r\n"
				+ "  }\r\n"
				+ "  document.addEventListener(\"keydown\", keyDownHandler, false);\r\n"
				+ "  document.addEventListener(\"keyup\", keyUpHandler, false);\r\n"
				+ "  document.addEventListener(\"mousemove\", mouseMoveHandler, false);\r\n"
				+ "\r\n"
				+ "  function mouseMoveHandler(e){\r\n"
				+ "    var relativeX = e.clientX - canvas.offsetLeft;\r\n"
				+ "    if(relativeX > 0 && relativeX < canvas.width){\r\n"
				+ "      paddleX = relativeX - paddleWidth/2;\r\n"
				+ "    }\r\n"
				+ "  }\r\n"
				+ "\r\n"
				+ "  function keyDownHandler(e) {\r\n"
				+ "    if(e.key == \"Right\" || e.key == \"ArrowRight\") {\r\n"
				+ "      rightPressed = true;\r\n"
				+ "    }\r\n"
				+ "    else if (e.key == \"left\" || e.key == \"ArrowLeft\") {\r\n"
				+ "      leftPressed = true;\r\n"
				+ "    }\r\n"
				+ "  }\r\n"
				+ "\r\n"
				+ "  function keyUpHandler(e) {\r\n"
				+ "    if (e.key == \"Right\" || e.key == \"ArrowRight\") {\r\n"
				+ "      rightPressed = false;\r\n"
				+ "    }\r\n"
				+ "    else if(e.key == \"Left\" || e.key == \"ArrowLeft\") {\r\n"
				+ "      leftPressed = false;\r\n"
				+ "    }\r\n"
				+ "  }\r\n"
				+ "\r\n"
				+ "  function collisionDetection() {\r\n"
				+ "    for(var c=0; c<brickColumnCount; c++) {\r\n"
				+ "        for(var r=0; r<brickRowCount; r++) {\r\n"
				+ "            var b = bricks[c][r];\r\n"
				+ "            if(b.status == 1){\r\n"
				+ "              if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {\r\n"
				+ "                dy = -dy;\r\n"
				+ "                b.status = 0;\r\n"
				+ "                score++;\r\n"
				+ "                if(score == brickRowCount*brickColumnCount) {\r\n"
				+ "                  alert(\"YOU WIN, CONGRATULATIONS!\");\r\n"
				+ "                  document.location.reload();\r\n"
				+ "                  // clearInterval(interval);\r\n"
				+ "                }\r\n"
				+ "              }\r\n"
				+ "           }\r\n"
				+ "        }\r\n"
				+ "    }\r\n"
				+ "} \r\n"
				+ "            \r\n"
				+ "\r\n"
				+ "function drawScore(){\r\n"
				+ "  ctx.font = \"16px Arial\";\r\n"
				+ "  ctx.fillStyle = \"#0095DD\"\r\n"
				+ "  ctx.fillText(\"score: \"+score, 8, 20);\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "function drawLives(){\r\n"
				+ "  ctx.font = \"16px Arial\";\r\n"
				+ "  ctx.fillStyle = \"#0095DD\"\r\n"
				+ "  ctx.fillText(\"Lives: \"+lives, canvas.width-65, 20);\r\n"
				+ "}\r\n"
				+ "  // setInterval(draw, 10);\r\n"
				+ "  draw();\r\n"
				+ "</script>\r\n"
				+ "\r\n"
				+ "</body>\r\n"
				+ "</html>");
		}
	}
	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
